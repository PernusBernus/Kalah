Introduction to AI
==================
End of Term Exercise

1. Overview of the program

The purpose of the program is to create the board game Kalah. We have decided to implement this using the Java programming language.
The Kalah program is made up of a (Kalah.java) Main class, (AI.java) AI class and the (Board.java) Board class.

The main class deals with the core game, it has 4 data fields, a Boolean named 'gameover' which controls when the game finishes, an integer array named 'board' which holds the houses and stores 2 integer data fields named 'beanSumP1' and 'beanSumP2' which counts the number of beans in the houses of each respective player. 
Boolean 'gameover' is initially set to false, the 'board' array consists of 14 elements, 12 for the houses and 2 for each player’s store. The sum of the players houses are intially set to 0, a loop is used to go through the array filling each house with 4 beans in each and leaving the stores empty for both players.
Once the game has been initialized, the 'Main Loop' is able to start. The turn has been set to 'true' for player 1, so they are able to start the game – while it is not the end of the game. This loops through moves for player one and player two simultaneously,  when a player selects a house an IF statement checks to see if the move is valid. This is done by checking if the house selected is on their side and whether there are beans in the house. As soon as this is validated it checks to see whether the player will get bonus beans for their move, or if the player will get a bonus move. If a player chooses an invalid house/move the player must take their move again.
Once the game has reached an end the main loop stops. The stores of the two players are then compared with each other to see which player has won the game of Kalah.
There are other methods which get used within the Main loop of the game which are:- 
→ move – This carries out each players move by deploying the beans to their respected 	       houses and store. It also determines whether the player will be rewarded with 	       bonus beans or a bonus move.
→ fillBeans – This fills the respected houses with a single bean in each house.
→ checkOppositeHouse – This checks to see if the opposite house is filled or not.
→ bonusBeans – This rewards the player if the last bean lands in an empty house 			        opposite a filled house.
→ checkAllEmptyHouses – This checks the houses to see if they are empy to determine 				  the end of the game
 → endGameMove – When game over this adds up all the beans still in play and adds it to 			   their repective store.
→ printBoard – This prints a game board, so the player can see the current state of the 		    game

Minimax is useful as it minimizes the maximum amount of losses, so then it can look ahead to a given depth to choose which move is best to take. This decision making algorithm is generally used in two player games, where moves by each player are taken simultaneously. Minimax analyses the situation to produce a better outcome – so the greater depth the better it will be however it be also become exponentially bigger meaning it will progressively become slower. 


Below shows a number of wins for each agent. The agents are Supervised Learning algorithm,  Reinforcement Learning algorithm and the Random generator player. These result are for when each algorithm is played against each other.


Supervised
Reinforcement
Random
Supervised
--------------------------


Reinforcement

--------------------------
523
Random

449
--------------------------

Above shows the results from a 1000 games when each algorithm is played against each other. Some of the results are unexpected, especially the  Reinforcement versus Supervised – where the Reinforcement has a 100% win ratio.





